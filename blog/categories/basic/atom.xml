<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: basic | A little ninja blog]]></title>
  <link href="http://blog4fun.github.io/blog/categories/basic/atom.xml" rel="self"/>
  <link href="http://blog4fun.github.io/"/>
  <updated>2014-01-12T17:14:27+09:00</updated>
  <id>http://blog4fun.github.io/</id>
  <author>
    <name><![CDATA[Duong Nguyen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[On sparse matrix storage schemes (Novice-level)]]></title>
    <link href="http://blog4fun.github.io/blog/2013/11/29/memo-on-sparse-matrix-storage-schemes-novice-level/"/>
    <updated>2013-11-29T17:00:00+09:00</updated>
    <id>http://blog4fun.github.io/blog/2013/11/29/memo-on-sparse-matrix-storage-schemes-novice-level</id>
    <content type="html"><![CDATA[<p>In this post, I will discuss some simple storage schemas for sparse matrices. <br />
<strong>Disclaimer</strong>: This <em>informal</em> note is mainly based on my understanding so far, and for my learning purposes. For more accurate and detailed discussion, please refer to your reliable sources.</p>

<p>A sparse matrix is a matrix, which is almost all <em>zeros</em>. 
In general, a <em>zero</em> can be thought as a meaningless value that we don't need to store.
In other words, storing only nonzero items for a sparse matrix is enough. As a result, we can save a lot of memory space, or time to transfer compressed data over networks, etc. But, keep in mind that there might be a <strong>trade-off</strong> between memory efficiency and fast/easy access to nonzero items. We will discuss more about this problem in later posts (I hope so!).</p>

<p>Let M denote a sparse matrix of size <code>R x C</code>. Assume that M contains <code>n</code> nonzero items, where <code>n</code> is significantly smaller than <code>R x C</code>. Below are three simple yet useful storage schemes:<br />
<strong>1. Coordinate Format (COO)</strong>    <br />
A list of triplets <code>(r,c,val)</code>, where <code>val = M[r][c]</code>.   </p>

<p><strong>2. Compressed Sparse Row Format (CSR)</strong> <br />
Basically, all information is stored in 3 arrays:   <br />
  * <code>vals</code>: array of nonzero items in left-to-right, then top-to-bottom order. Hence, vals is a length <code>n</code> array. <br />
  * <code>col_ind</code>: array of column indices (0-based) of nonzero items. Hence, col_ind is a length <code>n</code> array. <br />
  * <code>rs_ind</code>: (index of first nonzero item of each row in vals array). Hence, rs_ind is a length <code>(R+1)</code> array. All nonzero items of M's i-th row lies in range <code>[rs_ind[i], rs_ind[i+1]-1]</code> of vals array. That is, if we denote <code>le = rs_ind[i], ri = rs_ind[i+1]-1</code>, then <code>vals[le..ri]</code> are all nonzero items in i-th row of M.  </p>

<p><strong>3. Compressed Sparse Column Format (CSC)</strong>  <br />
This format can be thought as CSR with the roles of row and column exchanged. Then, I will skip the explanation here.</p>
]]></content>
  </entry>
  
</feed>
